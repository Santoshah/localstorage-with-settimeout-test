/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$s-arrow-button: (164px, 115px, -164px, -115px, 10px, 17px, 231px, 181px, '../images/sprite.png', 's-arrow-button', );
$s-facebook: (192px, 69px, -192px, -69px, 18px, 18px, 231px, 181px, '../images/sprite.png', 's-facebook', );
$s-heart-hover: (215px, 97px, -215px, -97px, 15px, 12px, 231px, 181px, '../images/sprite.png', 's-heart-hover', );
$s-heart: (200px, 97px, -200px, -97px, 15px, 12px, 231px, 181px, '../images/sprite.png', 's-heart', );
$s-homeless: (0px, 44px, 0px, -44px, 137px, 44px, 231px, 181px, '../images/sprite.png', 's-homeless', );
$s-instagram: (182px, 97px, -182px, -97px, 18px, 18px, 231px, 181px, '../images/sprite.png', 's-instagram', );
$s-irie: (0px, 140px, 0px, -140px, 75px, 41px, 231px, 181px, '../images/sprite.png', 's-irie', );
$s-make-a-wish: (0px, 0px, 0px, 0px, 164px, 44px, 231px, 181px, '../images/sprite.png', 's-make-a-wish', );
$s-pcny: (0px, 88px, 0px, -88px, 92px, 52px, 231px, 181px, '../images/sprite.png', 's-pcny', );
$s-r: (164px, 0px, -164px, 0px, 67px, 69px, 231px, 181px, '../images/sprite.png', 's-r', );
$s-ree: (164px, 69px, -164px, -69px, 28px, 28px, 231px, 181px, '../images/sprite.png', 's-ree', );
$s-twitter: (164px, 97px, -164px, -97px, 18px, 18px, 231px, 181px, '../images/sprite.png', 's-twitter', );
$s-vimeo: (210px, 69px, -210px, -69px, 18px, 18px, 231px, 181px, '../images/sprite.png', 's-vimeo', );
$spritesheet-sprites: ($s-arrow-button, $s-facebook, $s-heart-hover, $s-heart, $s-homeless, $s-instagram, $s-irie, $s-make-a-wish, $s-pcny, $s-r, $s-ree, $s-twitter, $s-vimeo, );
$spritesheet: (231px, 181px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}

